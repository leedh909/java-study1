3/31(화)


*23-3 동기화(Synchronization)
동기화란?->
메모리 공간 = heap 영역
두 쓰레드가 동시에 접근해야하는데 stack영역은 개별공간이고 heap영역에 접근.
근데 heap영역에 동시에 접근하면 문제가 생김->순서로 컨트롤
작업이 끝나면 넘겨야 오류가 안난다.
동기화하는 방법 -> synchronized 라고 선언해줘야한다.(ex) public synchronized void increament()
(대신 최소한의 블록에만 적용해야 원활하게 사용할 수 있다.)
동기화에 사용되는 인스턴스는 하나이며, 이 인스턴스에는 하나의 열쇠만이 존재한다.
synchronized를 선언하면 자물쇠를 거는 행위이다.->열쇠(=인스턴스)를 가져야 접근 가능.
열쇠를 사용중이면 다른 쓰레드는 접근하지 못한다.(락이 걸려있다.= 잠겨있다라고한다.)
동기화 블록 기반( 어떤 대상으로 synchronized 영역에 접근하겠다.)
sychronized가 필요한 부분만 synchronized(this){ ... }  형태로 만들어서 쓰인다.
wait, notify, notifyall 에 의한 실행순서 동기화( 불안전하기 때문에 동기화(synchronzied) 처리해줘야한다.)
wait -> notify 또는 notifyall 메소드가 호출될 때까지 블로킹 상태에 놓이게 된다.
notity -> wait 함수의 호출을 통해서 블로킹 상태에 놓여있는 쓰레드 하나를 깨운다.
notifyall->wait 함수의 호출을 통해서 블로킹 상태에 놓여있는 모든 쓰레드를 깨운다.
boolean 으로 조건을 정해놓고 조건이 만족되는 경우를 실행시키겠다.





