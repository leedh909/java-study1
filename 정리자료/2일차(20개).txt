3/12(목)

*1-2 자바 프로그램의 이해와 실행의 원리
일반적인 프로그램의 실행구조는 소스코드가 운영체제에 의존적이다.
자바 프로그램의 실행구조는 자바 가상머신 위에서 동작해서 운영체제에 의존적이지 않다.
자바의 속도를 문제시 삼지말라.(가상머신때문에 속도가 저하되기는 하지만 소프트웨어 상의 속도는 현저히 증가한다.)

*1-3 첫 번째 자바 프로그램의 관찰과 응용
클래스(메소드를 정의하는것)
메소드(클래스 안에 있는 것=함수)
클래스의 이름과 파일의 이름이 같다.
명령문의 끝에는 반드시 세미콜론(;)을 붙여야한다.

*1-4 컴파일의 대상에서 제외되는 주석!
주석을 다는건 개발자 본인의 편리성을 위해서 좋다.

*2-1 변수의 이해와 활용
cpu의 목적은 "연산"속도를 늘리는것
메모리의 목적은 "저장(참조)"이다.
변수 선언을 통해 자바에서 "메모리 공간의 확보와 접근 방법"을 제공한다.

*2-2 정수 표현방식의 이해
가장 왼쪽 비트인 MSB는 부호를 나타낸다.
2의 보수가 음의 정수 표현방식이다.

*2-3 실수 표현방식의 이해
실수는 오차를 동반한다.?(정수사이의 실수는 갯 수가 무한대여서 모두 표현하기란 힘들다.)

*2-4 자료형의 이해
float와 double의 큰 차이점은 정밀도이다.
boolean은 참(true)과 거짓(false)을 표현한다.

*3-1 자료형을 기반으로 표현이 되는 상수
접미사를 이용한 상수표현 (접미사 L은 long형/ 접미사 F는 float형)

*3-2 자료형의 변환
형변환할시 빈곳은 0으로 채운다.
자동 형변환 규칙( byte -> short=char -> int -> long -> float -> double)

*4-1 자바에서 제공하는 이항 연산자들
복합대입 연산자 ex) (a=a+b) == (a+=b) 와 같다.
관계연산자는 true와 false로 답이 나온다.
and나 or 연산자에서 앞에 결과값이 식을 성립한다면 뒷값을 계산하지 않고 결과값을 출력한다.
ex) result=(num1+=10)<0 && (num2+=10)>0

*4-2 자바에서 제공하는 단항 연산자들
++,-- 하는 방식을 설명 ex) ++a 는 a의 값을 하나 증가한다.
++a, a++ 의 시점 차이 : 문장이 실행되기전 실행된 후 결과값 바뀌는 차이이다.

*4-3 비트와 관련이 있는 연산자들
비트연산 진리표(and, or, xor, not)
비트 쉬프트(shift)연산자  
(왼쪽으로의 비트 열 이동은 2의 배수의 곱, 오른쪽으로의 비트 열 이동은 2의 배수의 나눗셈)

*5-1 if 그리고 else
if, else if, else 를 사용하면 조건의 만족 여부에 따라서 하나만 실행된다.
if~else와 유사한 성격의 조건 연산자 ( true or false ? 숫자1 : 숫자2; )

*5-2 switch와 break
switch(n){ case 1:  .... case2: ... default: ... }
break는 결과영역에서 빠져나와라
레이블을 묶어서 한 영역으로 만들 수 있다.
 
*5-3 for,while 그리고 do~while
while( 반복조건 ){ 반복 영역 }
do{ 반복 영역 }while( 반복조건 );  //최소한번은 실행(무조건 한번 실행하고 조건대입)
for(변수선언; 조건; 연산){ 결과 출력 }

*5-4 continue & break
break는 break 윗라인 까지 실행하고 반복문을 빠져나가라는 이미
continue는 아래 조건을 무시하고 반복문을 다시 돌려라.
무한루프는 while(true) , do{}while(true); , for(){} 으로 나타낸다.

*5-5 반복문의 중첩
"break 레이블"을 사용하면 원하는 부분으로 돌아간다.

*6-1 메소드에 대한 이해와 메소드의 정의
메소드는 한번 정의해 둔것을 불러서 다시 사용할 수 있다.
hiEveryone(int age) 라는 메소드를 생성해 보았다. int age 라는 매개변수를 이용.
메소드는 값을 받기만 하는게 아니라 값을 전달할 수도 있다. (return을 이용)
return은 값의 반환, 메소드의 종료 라는 2가지 의미를 갖는다.
중간에 return문이 있다면 뒷문장을 실행하지 않고 종료시킨다.

*6-2 변수의 스코프(scope)
지역변수는 자신의 지역에서만 실행이 가능하다.(=매개변수도 지역변수이다.)

*6-3 메소드의 재귀호출
재귀는 자료구조와 알고리즘에 중요하다.
재귀는 순환을 의미.
재귀적 메소드는 재귀적 메소드의 복사본을 여러개 가져와서 실행하는 것과 같다. 


